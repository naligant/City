/**
 * @file CityReport.h
 *
 * @author Charles B. Owen
 *
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
 */

#pragma once

#include <memory>
#include <vector>
#include <random>
#include <list>

class City;
class MemberReport;

/**
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
*/
class CityReport
{
private:
    /// The city this report is for
    City* mCity;

    /// Random number generator
    std::mt19937 mRandom;

protected:
    /// Size of the bins in the linked list
    static const int BinSize = 7;

    /// A bin stores up to 7 city reports in a
    /// single linked list node.
    class ReportsBin {
    public:
        /// A place to store the reports in this bin
        /// Up to 7 reports can be stored, followed by
        /// a null pointer after the last report pointer.
        std::shared_ptr<MemberReport> mReports[BinSize+1];

        bool IsFull();
        void Add(std::shared_ptr<MemberReport> report);

    };

    /// The collection of reports
    std::list<std::shared_ptr<ReportsBin>> mReportBins;

public:
    explicit CityReport(City* city);

    void Add(std::shared_ptr<MemberReport> report);
    /**
     * Iterates through
     */
    class Iter
    {
    public:
        /** Constructor
        * @param reports The collection we are iterating over
        * @param iterator iterates through the bins
        * @param pos indexes through reports
        * */
        Iter(CityReport *reports, std::list<std::shared_ptr<ReportsBin>>::iterator iterator, int pos) : mReportBin(reports), mIterator(iterator), mPos(pos) {}

        /**
         * Test for end of the iterator
         * @param other The other iterator we are comparing with
         * @return True if we this position equals not equal to the other position
         */
        bool operator!=(const Iter &other) const
        {
            return mIterator != other.mIterator || mPos != other.mPos;
        }

        /**
         * Get value at current position
         * @return Square at mPos in the collection
         */
        std::shared_ptr<MemberReport> operator *() const { return (*mIterator)->mReports[mPos]; }

        /**
         * Increment the iterator
         * @return Reference to this iterator
         * */
        const Iter& operator++() {
            ++mPos;
            if ((*mIterator)->mReports[mPos] == nullptr)
            {
                ++mIterator;
                mPos = 0;
            }
            return *this;
        }

    private:
        /// The reports bins
        CityReport *mReportBin;

        /// Position in the collection
        std::list<std::shared_ptr<ReportsBin>>::iterator mIterator;

        ///Keeps track of position of reports
        int mPos;
    };
    /**
     * Get an iterator for the beginning of the collection
     * @return Iter object for the beginning of the collection
     */
    Iter begin() { return Iter(this, mReportBins.begin(), 0 ); }

    /**
     * Get an iterator for the end of the collection
     * @return Iter object for the end of the collection
     */
    Iter end() { return Iter(this, mReportBins.end(), 0); }
};

